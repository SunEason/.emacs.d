(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))(setq custom-file "~/.emacs.d/custom.el")(load custom-file)(require 'package)(add-to-list 'package-archives	     '("melpa" . "https://melpa.org/packages/")	     '("gnu" . "https://elpa.gnu.org/packages/"))	     (package-initialize);; auto pair(electric-pair-mode t)(use-package rainbow-delimiters  :ensure t  :hook (prog-mode . rainbow-delimiters-mode));; setup(setq inhibit-startup-screen t)(setq make-backup-files nil)                 (global-display-line-numbers-mode 1)(setq display-line-numbers-type 'relative)(scroll-bar-mode -1)(tool-bar-mode -1)(menu-bar-mode -1)(global-unset-key (kbd "C-SPC"));; (add-hook 'emacs-startup-hook (lambda () (call-process "fcitx5-remote -e && fcitx5-remote -t")))  ; Linux（Fcitx）(add-hook 'evil-normal-state-entry-hook          (lambda ()            (call-process "fcitx5-remote" nil 0 nil "-c")))  ; -c 表示关闭输入法（英文状态）;; (global-set-key (kbd "C-SPC") (lambda () (call-process "fcitx5-remote" nil 0 nil "-o")))(use-package evil  :ensure t  :init (evil-mode))(use-package evil-surround  :ensure t  :init (global-evil-surround-mode 1))(use-package evil-visualstar  :ensure t  :init (global-evil-visualstar-mode))(use-package counsel  :ensure t)(use-package ivy  :ensure t  :init  (ivy-mode 1)  (counsel-mode 1)  :config  (setq ivy-use-virtual-buffers t)  (setq search-default-mode #'char-fold-to-regexp)  (setq ivy-count-format "(%d/%d) ")  :bind  (("C-s" . 'swiper)   ("C-x b" . 'ivy-switch-buffer)   ("C-c v" . 'ivy-push-view)   ("C-c s" . 'ivy-switch-view)   ("C-c V" . 'ivy-pop-view)   ("C-x C-@" . 'counsel-mark-ring)   ("C-x C-SPC" . 'counsel-mark-ring)   :map minibuffer-local-map   ("C-r" . counsel-minibuffer-history)));;(use-package amx  ;;:ensure t  ;;:init (amx-mode))(use-package nerd-icons)(use-package nerd-icons-dired  :hook  (dired-mode . nerd-icons-dired-mode));; (load-theme 'wombat)(use-package doom-themes  :ensure t  :config  ;; Global settings (defaults)  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled        doom-themes-enable-italic t) ; if nil, italics is universally disabled  (load-theme 'doom-one t)  ;; Enable flashing mode-line on errors  (doom-themes-visual-bell-config)  ;; Enable custom neotree theme (nerd-icons must be installed!)  (doom-themes-neotree-config)  ;; or for treemacs users  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme  (doom-themes-treemacs-config)  ;; Corrects (and improves) org-mode's native fontification.  (doom-themes-org-config))(use-package doom-modeline  :ensure t  :init (doom-modeline-mode 1))(setq doom-modeline-height 50);;(use-package amx  ;;:ensure t  ;;:init (amx-mode))(use-package nerd-icons)(use-package nerd-icons-dired  :hook  (dired-mode . nerd-icons-dired-mode));; (load-theme 'wombat)(use-package doom-themes  :ensure t  :config  ;; Global settings (defaults)  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled        doom-themes-enable-italic t) ; if nil, italics is universally disabled  (load-theme 'doom-one t)  ;; Enable flashing mode-line on errors  (doom-themes-visual-bell-config)  ;; Enable custom neotree theme (nerd-icons must be installed!)  (doom-themes-neotree-config)  ;; or for treemacs users  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme  (doom-themes-treemacs-config)  ;; Corrects (and improves) org-mode's native fontification.  (doom-themes-org-config))(use-package doom-modeline  :ensure t  :init (doom-modeline-mode 1)  :config  (setq doom-modeline-height 50));;(use-package dired-x  ;;:ensure t  ;;:config    ;;(setq dired-recursive-copies 'always)    ;;(setq dired-recursive-deletes 'always)    ;;(setq dired-dwim-target t))